<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//INIT CHARACTER
//set z value
z=0;
zspeed = 0;
xspeed = 0;
yspeed = 0;
_speed = .1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//MOTION OF CHARACTER

// I copied this first-person controller (and the camera that goes with it) from https://enigma-dev.org/docs/Wiki/3D_for_GML:_First_person_mouselook
//

xspeed = 0;
yspeed = 0;

//walk
if keyboard_check(ord('W')) {

    
    xspeed += lengthdir_x(_speed,cameraObject.direction)
    yspeed += lengthdir_y(_speed,cameraObject.direction) 
}
else if keyboard_check(ord('S')) {

    xspeed += lengthdir_x(_speed,cameraObject.direction - 180)
    yspeed += lengthdir_y(_speed,cameraObject.direction - 180) 
}

//strafe
if keyboard_check(ord('A')) {
    
    xspeed += lengthdir_x(_speed,cameraObject.direction + 90)
    yspeed += lengthdir_y(_speed,cameraObject.direction + 90) 
}
else if keyboard_check(ord('D')) {
    
    xspeed += lengthdir_x(_speed,cameraObject.direction - 90)
    yspeed += lengthdir_y(_speed,cameraObject.direction - 90) 
}

if zspeed &gt; -1 {

    zspeed -= .01;
}

if !p3dc_check(game.collision_player,x+xspeed,y,z+1, game.collision_map,0,0,0) {

    x += xspeed;
}

if !p3dc_check(game.collision_player,x,y+yspeed,z+1, game.collision_map,0,0,0) {

    y += yspeed;
}

if (!p3dc_check(game.collision_player,x,y,z+zspeed, game.collision_map,0,0,0)) {

    z += zspeed;
}
else {

    z = 0;
    zspeed = 0;
}

if z &lt; -400 {

    game_end();
}


//let's collide with the exit
if instance_exists(exitObject) {

    if point_distance(exitObject.x,exitObject.y,x,y) &lt; 12 {
    
        room_goto_next();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
