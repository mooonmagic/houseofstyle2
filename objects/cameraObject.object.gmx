<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>testSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zdirection=0;
direction = 0;
z = 0;
image_speed=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//MOUSELOOK
//get display dimensions
display_w = global._WIDTH;
display_h = global._HEIGHT;

//calculate motion
change_x = (display_mouse_get_x() - display_w/2) / 32;
change_y = (display_mouse_get_y() - display_h/2) / 32;

//move cam
direction -= change_x
// I'm commenting this out because for now we don't need to look up and down, and it feels funny to do so with the character locked to the ground
// it also feels funny to have mouselook handle rotation with a 3rd person character oh well, will fix it later
zdirection += change_y 

//limit the zdirection
if zdirection &lt; -90 {

    zdirection = -90;
}
else if zdirection &gt; 90 {
    
    zdirection = 90;
}

//set mouse back
display_mouse_set(display_w/2,display_h/2);

// animate player; I'll make this a script later
if global._steps mod 12 == 0 {

    image_index += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//DRAW WHAT CAMERA SEES
//I do not understand trigonometry at all, I cannot explain this.

xf=characterObject.x;                             //x to look from
yf=characterObject.y;                            //y to look from
zf=characterObject.z+480;                          //z to look from
xt=xf+cos(degtorad(direction));                //x to look to (with direction)
yt=yf-sin(degtorad (direction));                //y to look to (with direction)
zt=zf-sin(degtorad(zdirection));               // z to look to (with z direction)
// note: the camera is pulled back behind the characterObject now so it rotates around the character object without translating like before (i.e., i fixed it)
d3d_set_projection_ext(xf-lengthdir_x(320,direction),yf-lengthdir_y(320,direction),zf-lengthdir_y(320,zdirection), xt,yt,zt, 0,0,1,60,view_wview[0]/view_hview[0],1,100000);  //look from &amp; to 


// this is the code to draw the smiley face, which we can replace with the player character eventually
// assuming we want to make a third-person game, that is
d3d_transform_set_identity(); // I don't really know what this does but you call it before and after moving or rotating a 3D object
d3d_transform_add_rotation_z(point_direction(xt+lengthdir_x(320,direction),yt+lengthdir_y(320,direction),characterObject.x,characterObject.y)); // This makes the smiley always face the camera; the lengthdirs return the x and y components of a point on a circle
d3d_transform_add_translation(xf,yf,16); // i changed this to draw the sprite at the actual location of the characterObject
draw_set_alpha_test(true); // tells gamemaker to check for transparency, which is expensive, so we just turn in on here, otherwise the sprite is in a black box
//d3d_draw_wall(1,16,16,1,-16,-16,sprite_get_texture(sprite_index,image_index),1,1); // draws the actual sprite, using the current sprite index and image index, which we can change in the step event to animate it
draw_set_alpha_test(false); // turning transparency checks off again
d3d_transform_set_identity(); // done with moving the 3D object

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
